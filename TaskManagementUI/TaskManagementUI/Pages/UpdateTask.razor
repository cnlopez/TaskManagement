@page "/update-task/{id:int}"
@using TaskManagementUI.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="text-center my-4">Update Task</h3>

<div class="container">
    @if (isLoading)
    {
        <p class="text-center">Cargando...</p>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <EditForm Model="task" OnValidSubmit="HandleValidSubmit" class="needs-validation">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" />

                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <InputText id="title" class="form-control" @bind-Value="task.Title" placeholder="Enter task title" />
                        <ValidationMessage For="@(() => task.Title)" />
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="task.Description" placeholder="Enter task description" />
                    </div>

                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <InputText id="status" class="form-control" @bind-Value="task.Status" placeholder="Enter task status" />
                    </div>

                    <div class="mb-3">
                        <label for="priority" class="form-label">Priority</label>
                        <InputNumber id="priority" class="form-control" @bind-Value="task.Priority" />
                    </div>

                    <div class="mb-3">
                        <label for="dueDate" class="form-label">Due Date</label>
                        <InputDate id="dueDate" class="form-control" @bind-Value="task.DueDate" />
                    </div>

                    <div class="mb-3">
                        <label for="project" class="form-label">Assign Project</label>
                        <InputSelect id="project" class="form-control" @bind-Value="task.ProjectId">
                            <option value="">-- Select a Project --</option>
                            @foreach (var project in projects)
                            {
                                <option value="@project.Id">@project.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => task.ProjectId)" />
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            <i class="bi bi-save"></i> Save Changes
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="NavigateBack">
                            <i class="bi bi-arrow-left"></i> Back to Tasks
                        </button>
                    </div>
                </EditForm>

                @if (isSuccess)
                {
                    <div class="alert alert-success mt-3">
                        The task was successfully updated.
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        Error: @errorMessage
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private TaskTable task = new TaskTable();
    private List<Project> projects = new List<Project>();

    private bool isLoading = true;
    private bool isSaving = false;
    private bool isSuccess = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load projects to show in dropdown
            projects = await Http.GetFromJsonAsync<List<Project>>("project");

            // Load the task to edit
            task = await Http.GetFromJsonAsync<TaskTable>($"api/task/{Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading data: {ex.Message}";
        }
        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        errorMessage = string.Empty;

        try
        {
            var response = await Http.PutAsJsonAsync($"api/task/{task.Id}", task);
            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                errorMessage = string.Empty;
                Navigation.NavigateTo("/tasks"); //go to the task list after creating 
            }
            else
            {
                isSuccess = false;
                errorMessage = "An error occurred. The task was not updated.";
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            errorMessage = $"Error saving changes: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/tasks");
    }
}
