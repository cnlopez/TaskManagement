@page "/update-task/{id:int}"
@using TaskManagementUI.Models
@inject HttpClient Http
@inject NavigationManager Navigation
<h3>UpdateTask</h3>

@code {
    [Parameter]
    public int Id { get; set; }

    private TaskTable task = new TaskTable();
    private List<Project> projects = new List<Project>();

    private bool isLoading = true;
    private bool isSaving = false;

    private bool isSuccess = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get projects to show in drop down list
            projects = await Http.GetFromJsonAsync<List<Project>>("api/project");

            // Get the task to edit
            task = await Http.GetFromJsonAsync<TaskTable>($"api/task/{Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading data: {ex.Message}";
        }
        isLoading = false;
    }


    private async Task HandleValidSubmit()
    {
        isSaving = true;
        errorMessage = string.Empty;

        try
        {
            var response = await Http.PutAsJsonAsync($"api/task/{task.Id}", task);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/tasks"); // Go to the tasks list after creating
            }
            else
            {
                isSuccess = false;
                errorMessage = "An error occurred. The task was not updated.";
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            errorMessage = $"Error by saving changes: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

}

@if (isLoading)
{
    <p>Cargando...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    <EditForm Model="task" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="title">Title</label>
            <InputText id="title" class="form-control" @bind-Value="task.Title" />
            <ValidationMessage For="@(() => task.Title)" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="task.Description" />
        </div>

        <div class="form-group">
            <label for="status">Status</label>
            <InputText id="status" class="form-control" @bind-Value="task.Status" />
        </div>

        <div class="form-group">
            <label for="priority">Priority</label>
            <InputNumber id="priority" class="form-control" @bind-Value="task.Priority" />
        </div>

        <div class="form-group">
            <label for="dueDate">Due Date</label>
            <InputDate id="dueDate" class="form-control" @bind-Value="task.DueDate" />
        </div>

        <div class="form-group">
            <label for="project">Asignar Proyecto:</label>
            <InputSelect class="form-control" @bind-Value="task.ProjectId">
                <option value="">-- Selecciona un Proyecto --</option>
                @foreach (var project in projects)
                {
                    <option value="@project.Id">@project.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => task.ProjectId)" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isSaving">Edit Task</button>
    </EditForm>

    @if (isSuccess)
    {
        <div class="alert alert-success">
            The task was successfully created.
        </div>
    }

    @if (errorMessage != string.Empty)
    {
        <div class="alert alert-danger">
            Error: @errorMessage
        </div>
    }
}


