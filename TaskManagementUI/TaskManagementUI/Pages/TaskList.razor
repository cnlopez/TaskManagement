@page "/tasks"
@using TaskManagementUI.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3 class="my-4">Tasks</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}

@if (tasks == null || !tasks.Any())
{
    <p>No tasks found.</p>
}
else
{
    <table class="table table-hover table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Description</th>
                <th>Status</th>
                <th>Priority</th>
                <th>Due Date</th>
                <th>Project Id</th>
                <th>Project</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Id</td>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.Status</td>
                    <td>@task.Priority</td>
                    <td>@task.DueDate.ToString("dd/MM/yyyy")</td>
                    <td>@task.ProjectId</td>
                    <td>@task.Project?.Name</td>
                    <td>
                        <NavLink class="btn btn-sm btn-outline-primary" href="@($"update-task/{task.Id}")">Edit</NavLink>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTask(task.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <NavLink class="btn btn-success mt-3" href="@("create-task")">Create Task</NavLink>
}

@code {
    //private TaskTable[] tasks;
    private List<TaskTable> tasks;
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Make the call to de API to get the tasks
            tasks = await Http.GetFromJsonAsync<List<TaskTable>>("api/task");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading tasks: {ex.Message}";
        }
    }

    private async Task DeleteTask(int id)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Are you sure you want to delete the task id {id}?");

        if (isConfirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/task/{id}");
                if (response.IsSuccessStatusCode)
                {
                    // Delete task from list in the UI
                    tasks = tasks.Where(p => p.Id != id).ToList();
                    errorMessage = null;
                }
                else
                {
                    errorMessage = "An error occurred. The task was not deleted.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error: {ex.Message}";
            }
        }
    }
}
