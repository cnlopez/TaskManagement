@page "/projects"
@using TaskManagementUI.Models
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<h3>Projects</h3>

@if (projects == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.Id</td>
                    <td>@project.Name</td>
                    <td>@project.Description</td>
                    <td>@project.StartDate.ToString("dd/MM/yyyy")</td>
                    <td>@project.EndDate.ToString("dd/MM/yyyy")</td>
                    <td>
                        <NavLink class="btn btn-primary" href="@($"update-project/{project.Id}")">Edit</NavLink>
                        <button class="btn btn-danger" @onclick="() => DeleteProject(project.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @* <ul>
        @foreach (var project in projects)
        {
            <li>@project.Name</li>
            <li>@project.Description</li>
        }
    </ul> *@
}

@code {
    //private Project[] projects;
    private List<Project> projects;
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        // Make the call to de API (Endpoint) to get the projects
        //projects = await Http.GetFromJsonAsync<Project[]>("api/project");
        try
        {
            projects = await Http.GetFromJsonAsync<List<Project>>("api/project");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar proyectos: {ex.Message}";
        }
    }

    private async Task DeleteProject(int id)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de que deseas eliminar el proyecto con id {id}?");
        //bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"¿Estás seguro de que deseas eliminar el proyecto con id {id}?" });

        if (isConfirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/project/{id}");
                if (response.IsSuccessStatusCode)
                {
                    // Delete prject from list in the UI
                    projects = projects.Where(p => p.Id != id).ToList();
                    errorMessage = null;
                }
                else
                {
                    errorMessage = "No se pudo eliminar el proyecto.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error: {ex.Message}";
            }
        }
    }
    
}
