@page "/projects"
@using TaskManagementUI.Models
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<h3 class="my-4">Projects</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}

@if (projects == null || !projects.Any())
{
    <p>No projects found.</p>
}
else
{
    <div class="container">
        <table class="table table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var project in projects)
                {
                    <tr>
                        <td>@project.Name</td>
                        <td>@project.Description</td>
                        <td>@project.StartDate.ToString("dd/MM/yyyy")</td>
                        <td>@project.EndDate.ToString("dd/MM/yyyy")</td>
                        <td>
                            <NavLink class="btn btn-sm btn-outline-primary" href="@($"update-project/{project.Id}")">Edit</NavLink>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteProject(project.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <NavLink class="btn btn-success mt-3" href="@("create-project")">Create Project</NavLink>
    </div>
}

@code {
    private List<Project> projects = new List<Project>();
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            projects = await Http.GetFromJsonAsync<List<Project>>("project");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading projects: {ex.Message}";
        }
    }

    private async Task DeleteProject(int id)
    {
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete project ID {id}?");

        if (isConfirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"project/{id}");
                if (response.IsSuccessStatusCode)
                {
                    projects = projects.Where(p => p.Id != id).ToList();
                    errorMessage = null;
                }
                else
                {
                    errorMessage = "Failed to delete the project.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error: {ex.Message}";
            }
        }
    }
}
