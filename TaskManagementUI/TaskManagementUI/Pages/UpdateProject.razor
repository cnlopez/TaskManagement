@page "/update-project/{id:int}"
@using TaskManagementUI.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3 class="text-center my-4">Update Project</h3>

<div class="container">
    <div class="card shadow-sm">
        <div class="card-body">
            <EditForm Model="project" OnValidSubmit="HandleValidSubmit" class="needs-validation">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="mb-3">
                    <label for="name" class="form-label">Project Name</label>
                    <InputText id="name" class="form-control" @bind-Value="project.Name" placeholder="Enter project name" />
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" class="form-control" @bind-Value="project.Description" placeholder="Enter project description" />
                </div>

                <div class="mb-3">
                    <label for="startDate" class="form-label">Start Date</label>
                    <InputDate id="startDate" class="form-control" @bind-Value="project.StartDate" />
                </div>

                <div class="mb-3">
                    <label for="endDate" class="form-label">End Date</label>
                    <InputDate id="endDate" class="form-control" @bind-Value="project.EndDate" />
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-save"></i> Save Changes
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">
                        <i class="bi bi-arrow-left"></i> Back to Projects
                    </button>
                </div>
            </EditForm>

            @if (isSuccess)
            {
                <div class="alert alert-success mt-3">
                    The project was successfully updated.
                </div>
            }

            @if (errorMessage != null)
            {
                <div class="alert alert-danger mt-3">
                    Error: @errorMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Project project = new Project();
    private bool isSuccess = false;
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load project data
            project = await Http.GetFromJsonAsync<Project>($"project/{Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"An Error occurred while loading the project: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"project/{Id}", project);
            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                errorMessage = null;
                // Navigate back to project listing or show confirmation
                Navigation.NavigateTo("/projects");
            }
            else
            {
                isSuccess = false;
                errorMessage = "An Error occurred. The project was not updated.";
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/projects");
    }
}
